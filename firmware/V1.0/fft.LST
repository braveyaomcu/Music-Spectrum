C51 COMPILER V9.00   FFT                                                                   04/02/2022 17:33:40 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FFT
OBJECT MODULE PLACED IN fft.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE fft.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "system.h"
   2          #include "display.h"
   3          #include <intrins.h>
   4          #include <stdio.h>
   5          #include <math.h>
   6          #include <float.h>
   7          #define ADC_CH1 4
   8          #define ADC_CH2 5
   9          
  10          #define ADC_POWER   0x80            //ADC power control bit
  11          #define ADC_FLAG    0x10            //ADC complete flag
  12          #define ADC_START   0x08            //ADC start control bit
  13          #define ADC_SPEEDLL 0x00            //420 clocks
  14          #define ADC_SPEEDL  0x20            //280 clocks
  15          #define ADC_SPEEDH  0x40            //140 clocks
  16          #define ADC_SPEEDHH 0x60            //70 clocks
  17          
  18          code float iw[64]=
  19          {
  20                  1.000,0,0.9952,-0.0980,0.9808,-0.1951,0.9569,-0.2903,0.9239,-0.3827,0.8819,-0.4714,0.8315,-0.5556,
  21                  0.7730,-0.6344,0.7071,-0.7071,0.6344,-0.7730,0.5556,-0.8315,0.4714,-0.8819,0.3827,-0.9239,0.2903,-0.9569,
  22                  0.1951,-0.9808,0.0980,-0.9952,0.0,-1.0000,-0.0980,-0.9952,-0.1951,-0.9808,-0.2903,0.9569,-0.3827,-0.9239,
  23                  -0.4714,-0.8819,-0.5556,-0.8315,-0.6344,-0.7730,-0.7071,-0.7071,-0.7730,-0.6344,-0.8315,-0.5556,-0.8819,-
             -0.4714,
  24                  -0.9239,-0.3827,-0.9569,-0.2903,-0.9808,-0.1951,-0.9952,-0.0980
  25          };
  26          
  27          struct compx
  28          {
  29                  float real;
  30                  float imag;
  31          };
  32          xdata struct compx dd[65]; //FFT数据   
  33          xdata struct compx temp;  
  34          
  35          //复数乘法
  36          void ee(struct compx b1,Byte data b2)
  37          { 
  38   1              temp.real=b1.real*iw[2*b2]-b1.imag*iw[2*b2+1];
  39   1              temp.imag=b1.real*iw[2*b2+1]+b1.imag*iw[2*b2]; 
  40   1      } 
  41          //乘方函数  
  42          Word mypow(Byte data nbottom,Byte data ntop)
  43          {
  44   1          Word xdata result=1;
  45   1          Byte xdata t;    
  46   1          for(t=0;t<ntop;t++)result*=nbottom; 
  47   1          return result;
  48   1      }
  49          //快速傅立叶变换  
  50          void fft(struct compx *xin,Byte data N)
  51          {
  52   1              Byte xdata  fftnum,i,j,k,l,m,n,disbuff,dispos,dissec;
  53   1              xdata struct compx t;
  54   1              fftnum=N;                         //傅立叶变换点数
C51 COMPILER V9.00   FFT                                                                   04/02/2022 17:33:40 PAGE 2   

  55   1              for(m=1;(fftnum=fftnum/2)!=1;m++);//求得M的值 
  56   1              for(k=0;k<=N-1;k++)               //码位倒置
  57   1              {
  58   2                      n=k;
  59   2                      j=0; 
  60   2                      for(i=m;i>0;i--)             //倒置
  61   2                      {
  62   3                              j=j+((n%2)<<(i-1));
  63   3                              n=n/2;
  64   3                      } 
  65   2                      if(k<j){t=xin[j];xin[j]=xin[k];xin[k]=t;}//交换数据
  66   2              }  
  67   1              for(l=1;l<=m;l++)                //FFT运算
  68   1              {
  69   2                      disbuff=mypow(2,l);          //求得碟间距离
  70   2                      dispos=disbuff/2;            //求得碟形两点之间的距离
  71   2                      for(j=0;j<dispos;j++)
  72   2                              for(i=j;i<N;i=i+disbuff) //遍历M级所有的碟形
  73   2                              {
  74   3                                      dissec=i+dispos;     //求得第二点的位置
  75   3                                      ee(xin[dissec],(Word)(j)*(Word)N/disbuff);//复数乘法
  76   3                                      t=temp;
  77   3                                      xin[dissec].real=xin[i].real-t.real;
  78   3                                      xin[dissec].imag=xin[i].imag-t.imag;
  79   3                                      xin[i].real=xin[i].real+t.real;
  80   3                                      xin[i].imag=xin[i].imag+t.imag;
  81   3                              }
  82   2              }
  83   1      } 
  84          
  85          void Delay(Word n)
  86          {
  87   1          Word x;
  88   1      
  89   1          while (n--)
  90   1          {
  91   2              x = 5000;
  92   2              while (x--);
  93   2          }
  94   1      }
  95          
  96          void InitADC(void)
  97          {
  98   1          P1ASF = B(00110000);                   //Set all P1 as analog input port
  99   1          ADC_RES = 0;                    //Clear previous result
 100   1          ADC_CONTR = ADC_POWER | ADC_SPEEDLL ;//|ADC_START | ADC_CH1;
 101   1          Delay(2);                      //ADC power-on delay and Start A/D conversion
 102   1          
 103   1          //EADC=1;
 104   1      }
 105          
 106          static xdata Word AdcValue1=0;
 107          static xdata Word AdcValue2=0;
 108          static xdata Byte AdcIndex=0;
 109          static xdata Byte adc_state=0;
 110          static xdata float abs_min=FLT_MAX;
 111          
 112          void fftFSM(void)
 113          {
 114   1          Byte i=0;
 115   1          switch(adc_state)
 116   1          {
C51 COMPILER V9.00   FFT                                                                   04/02/2022 17:33:40 PAGE 3   

 117   2              case 0:
 118   2                  if(flag_200us)
 119   2                  {
 120   3                      flag_200us=0;
 121   3                      ADC_CONTR= ADC_POWER | ADC_SPEEDLL|ADC_START | ADC_CH1;
 122   3                      adc_state=1;
 123   3                  }
 124   2                  //printf("state 0");
 125   2                  break;
 126   2              case 1:
 127   2                  if(ADC_CONTR & ADC_FLAG)
 128   2                  {
 129   3                      ADC_CONTR &= ~ADC_FLAG;
 130   3                      AdcValue1=ADC_RES;
 131   3                      AdcValue1<<=2;
 132   3                      AdcValue1|=ADC_RESL;
 133   3                      //dd[AdcIndex].real += (float)AdcValue*1.0/1024*5.0;
 134   3                      //dd[AdcIndex].real += AdcValue;
 135   3                      adc_state=2;
 136   3                      //printf("AdcValue1:%d \r\n",AdcValue1);
 137   3                  }
 138   2                  break;
 139   2                  
 140   2              case 2:
 141   2                  //if(flag_200us)
 142   2                  {
 143   3                      flag_200us=0;
 144   3                      ADC_CONTR= ADC_POWER | ADC_SPEEDLL|ADC_START | ADC_CH2;
 145   3                      adc_state=3;
 146   3                  }
 147   2                  //printf("state 2");
 148   2                  break;
 149   2              case 3:
 150   2                  if(ADC_CONTR & ADC_FLAG)
 151   2                  {
 152   3                      ADC_CONTR &= ~ADC_FLAG;
 153   3                      AdcValue2=ADC_RES;
 154   3                      AdcValue2<<=2;
 155   3                      AdcValue2|=ADC_RESL;
 156   3                      //printf("AdcValue2:%d \r\n",AdcValue2);
 157   3                      //dd[AdcIndex].real += (float)AdcValue*1.0/1024*5.0;
 158   3                      
 159   3                      dd[AdcIndex].real=(AdcValue1+AdcValue2)<<3;
 160   3                      //printf("Index:%bd   Value:%f\r\n",AdcIndex,dd[AdcIndex].real);
 161   3                      AdcIndex++;
 162   3                      if(AdcIndex>=65)
 163   3                      {
 164   4                          AdcIndex=0;
 165   4                          //TO DO
 166   4                          
 167   4                          adc_state=10;
 168   4                          printf("state Over\r\n");
 169   4                      }
 170   3                      else
 171   3                          adc_state=0;
 172   3                  }
 173   2                  break;
 174   2              case 10:
 175   2                  for(i=0;i<65;i++)
 176   2                      dd[i].imag=0; 
 177   2                  adc_state++;
 178   2                  //printf("state 10");
C51 COMPILER V9.00   FFT                                                                   04/02/2022 17:33:40 PAGE 4   

 179   2                  break;
 180   2              case 11:
 181   2                  fft(dd,64);
 182   2                  adc_state++;
 183   2                  //printf("state 11");
 184   2                  break;
 185   2              case 12:
 186   2                  for(i=1;i<64/2+1;i++)
 187   2                      dd[i].real=sqrt(dd[i].real*dd[i].real+dd[i].imag*dd[i].imag);//取均方根 
 188   2                  adc_state++;
 189   2                  abs_min=FLT_MAX;
 190   2                  //printf("state 12");
 191   2                  break;
 192   2              case 13:
 193   2                  for(i=1;i<64/2+1;i++)
 194   2                      if(abs_min>dd[i].real)
 195   2                      {
 196   3                          abs_min=dd[i].real;
 197   3                          //dd[i].real=dd[i].real-
 198   3                      }
 199   2                  printf("min:%f\r\n",abs_min);
 200   2                  printf("*******************************\r\n");
 201   2                  adc_state++;
 202   2                  break;
 203   2              case 14:
 204   2                  for(i=1;i<64/2+1;i++)
 205   2                  {
 206   3                      dd[i].real=dd[i].real/abs_min;
 207   3                      printf("value:%f\r\n",dd[i].real);
 208   3                  }
 209   2                  adc_state++;
 210   2                  break;
 211   2              case 15:
 212   2                  for(i=0;i<16;i++)
 213   2                      displayBar[i]=dd[i+1+1].real-1;
 214   2                  adc_state=0;
 215   2              break;
 216   2              default:
 217   2                  break;
 218   2              
 219   2          }
 220   1          
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1926    ----
   CONSTANT SIZE    =    323    ----
   XDATA SIZE       =    538      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
